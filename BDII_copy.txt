//AULA 22.09
//ctrl t para iniciar
//f5 roda uma linha específica e f6 roda tudo 

use inventario_aula
// vamos referenciar o mesmo banco de dados do semestre passado
show dbs // mostra os bancos de dados ('seleciona + F6')
show collections

// criando a coleção empresa
// sempre utilizar ({})

db.empresa.drop ()

db.empresa.insertOne({razao_social: 'IBM do Brasil Ltda',
cnpj: 123456 , endereço: 'Rua Nazaré, 1568 - Sacomã' })

// equivale ao SELECT * FROM empresa
db.empresa.find( {} )


// Vamos apagar um dos IBMS específico - apagamos então o item com o id específico.
db.empresa.deleteOne({"_id" : ObjectId("632c57f95895997f8a45d441")})

// deletamos um valor que tenha IBM no nome
// db.empresa.deleteOne({razao_social: /ibm/i})
// Deletamos todos os valores que tenha IBM no nome
// db.empresa.deleteMany({razao_social: /ibm/i})

// Para inserir vários valores ao mesmo tempo, precisamos abrir um vetor [ ] e dentro desse vetor, adicionarmos os valores que desejamos inserir
// utilizando {} para cada documento. No caso temos dois documentos inseridos, onde o segundo documento tem outro vetor [] com os valores dos telefones do Fornecedor


db.empresa.insertMany([ {razao_social:'Microsoft do Brasil', cnpj: 678901, tipo:'Fabricante', endereço:{rua:'Vergueiro', número: 6000, bairro: 'Ipiranga'}, ano_fundação: 1977}, 
    {razao_social: 'ABC Distribuidora Equipamentos Ltda', tipo:'Fornecedor', cnpj: 123987, fones: [1234, 45678, 9012]}  ])
    
    
db.empresa.find( {} )


// Buscando pelo bairro
db.empresa.find({"endereço.bairro": {$regex: /Ipiranga/i} }) // $regex: é uma expressão regular (só utilizamos em versões antigas) i: insensitive

// Buscando com AND
db.empresa.find({"endereço.bairro": {$regex: /Ipiranga/i} , "endereço.rua": {$regex: /verg/i } })

// Usando o OR agora
db.empresa.find( { $or: [{"endereço.bairro": /Ipiranga/i} , {"endereço.rua": /naza/i }] })


// Buscando pelo bairro - negação $not (str) e $ne (number)
db.empresa.find({"endereço.bairro": {$not: /Ipiranga/i} })

// Atualizando o endereço do ABC e adicionando o telefone dentro do campo endereço o.O'
db.empresa.updateOne({razao_social: /ABC/i} , {$set:{endereço:{rua: "Frei João", número: 90, cep: 12345, fones: [554433, 221199]}}})

// tratamento dos vetores. Incluindo dois novos numeros de telefone para ABC Distribuidora (precisamos do $push e do $each)
db.empresa.updateOne({razão_social: /abc/i},{$push : {"endereço.fones": {$each: [554422, 221199] } }})

// atualizando um dos números de telefone
db.empresa.find({razao_social: /abc/i , "endereço.fones" : 221199 })
db.empresa.updateOne({razao_social: /abc/i , "endereço.fones": 221199} , {$set : {"endereço.fones.$": 4477788} })

db.empresa.find({razao_social: /abc/i , "endereço.fones" : 4477788 }) // telefone atualizado com sucesso. Altera o valor de 221199 pelo valor de 4477788


// excluindo um elemento do vetor $pull
db.empresa.updateOne({razao_social: /abc/i} , {$pull: {"endereço.fones": 554433} })

// incluindo os telefones com estruturas (vetor com dicionários embutidos)
db.empresa.updateOne({razao_social: /micro/i } , {$set : {fones: [{ddd: 11, número: 12345789, tipo: "comercial"}, 
                                                                  {ddd: 11, número: 4567112, tipo: "celular", contato: "Chico"}]} })



// consultando dentro da estrutura
db.empresa.find({"fones.contato": /chico/i })


// ATIVIDADE 4

// A)Crie uma nova coleção para software. Insira três documentos. Em cada um deles use uma estrutura diferente, em comum só o campo nome
db.software.insertMany([ {nome_software: "Anaconda", versao: 3.9, tipo:'Lingagem de Programação'},
                         {nome_software:'MongoDB', info_software:{versao:6.0, tipo:"Banco de dados NoSQL orientado a documentos"}}  
                         {nome_software:'Power BI', software_descricao:{v: 3.0, tipo:'software selfservice'}}  ])              

// B) Crie uma nova coleção para departamento. Insira 2 documentos. Em cada deles use uma estrutura diferente, em comum só o campo nome

db.departamento.insertMany([{nome:'Recursos Humanos, RH', centro_custo:56, localizacao:{endereco:{rua:'Alencar Araripe', numero:1258, bairro:'Sacomã'}}, fones:{ramal: 2557}}, 
                            {nome: 'Desenvolvimento e Implementação', descricao:{centro_custo: 57, localizacao:'Rua Itapeva, 250, Ipiranga'}, fones:{ramal:2558}} ])

db.departamento.find({nome: {$ne: 'informatica'}}) //$ne (not equal) --> somente número e data --> não permite o i, pois é exato
db.departamento.find({nome: {$not: /informatica/i}}) //$not --> texto

// C) Faça uma consulta mostrando os documentos de software que não são da categoria Sistema Operacional;

db.software.find({tipo: {$not : /operacional/i}})

// D) Faça uma consulta mostrando os documentos de departamento cujo nome tem ‘ção’ no nome.

db.departamento.find({nome:/ção/i})

//AULA 29.09
show collections
db.empresa.find( {} )
db.departamento.find( {} )
db.sotware.find( {} )

// Construindo uma coleção equipamento e relacionando com software e departamento

db.equipamento.drop ()
db.equipamento.insert ({patrimonio: 100, modelo: 'ThinkPad 1000',
    tipo: 'Computador', caracteristicas: {processador: 'I7', velocidade_ghz: 3.2,
    ram_gb: 16, armazenamento_gn: 1000} //inserir números sem aspas (not string) para usar operadores lógicos para comparação
})
db.equipamento.insertOne ({patrimonio: 101, modelo: 'Epson 1100', 
    tipo: 'Periferico', categoria: 'Impressora', caracteristicas: {ppm: 20, tipo: 'Jato de Tinta Colorida',
    resolução_dpu: 1200, tam_max_papel: 'A3'}
})

// Incluindo o campo categoria (que não tinha ainda) no computador
db.equipamento.updateOne ({patrimonio: 100},  //pode ser qualquer atributo, mas geralmente alteramos pelo ID
{$set: {categoria: 'Notebook'}
})

db.equipamento.find ()

// Incluir o fornecedor-fornecimento no equipamento 101

db.empresa.find ({tipo: /fornec/i})

// Excluir um dos ABCs

db.empresa.deleteOne ({"_id": ObjectId("63358d6ddc5099ea21c84177")})

// Incluindo (ou alternando) o endereço para o ABC

db.empresa.find({tipo: /fornec/i, razao_social: /abc/i}) //boas praticas, sempre procurar antes de alterar

db.empresa.updateOne({tipo: /fornec/i, razao_social : /abc/i},
	{$set: {endereço: {logradouro: 'Silva Bueno', número: 1200,
	        bairro: 'Ipiranga', cidade: 'São Paulo'} } })

// Relacionando eqpto com o fornecedor

db.equipamento.find ({})

db.equipamento.updateOne ({patrimonio: 101},
{$set: {fornecimento: {fornecedor_cnpj: 123987,
                       dt_aquisição: ISODate ("2022-03-10T14:22:15.333Z"), //UTC formato universal de data
                       valor_aquisição: 1800.99,
                       nota_fiscal: "F0123", 
                       garantia: 24}} })
        
// Supondo que deu errado, apagar o campo inteiro

db.equipamento.updateOne ({patrimonio: 101},
{$unset: {fornecimento: ""} })

// Relacionando as duas coleções - join do MongoDB

// Equipamento com fornecedor pelo CNPJ --> quem é o fornecedor de cada eqpto (equipamento e empresa)

db.equipamento.find ()
db.empresa. find ()


db.equipamento.aggregate ( 
{ $lookup: 
      {from: "empresa",
       localField: "fornecimento.fornecedor_cnpj", //PK (equipamento)
       foreignField: "cnpj", //FK (empresa)
       as: "fornecedor_eqpto"
      }
})

// Quais são os eqptos fornecidor por uma empresa ("join inverso")

db.equipamento.find ()
db.empresa. find ()


db.empresa.aggregate (
{ $lookup: 
      {from: "empresa",
       localField: "cnpj",
       foreignField: "fornecimento.fornecedor_cnpj",
       as: "eqptos_fornecidos"
      }
})

// colocando filtros --> somente quem é fornecedor

db.empresa.aggregate (
{$match: {tipo:/fornec/i} },
{ $lookup: 
      {from: "empresa",
       localField: "cnpj",
       foreignField: "fornecimento.fornecedor_cnpj",
       as: "eqptos_fornecidos"
      }

},
{$unwind: "$eqptos_fornecidos"}, //desaninha e trata como um documento separado
      {$project: {_id: 0, razao_social: 1,  //project: somente as colunas que quero mostrar (0 não mostra e 1 mostra) - ID é default
       "eqptos_fornecidos.modelo": 1,
       "eqptos_fornecidos.tipo": 1}}
)

// Relacionando equipamento 100 com o fornecedor

db.equipamento.updateOne({patrimonio: 100},
{$set: {fornecimento: {fornecedor_cnpj: 123987 , 
                        dt_aquisição : new Date(),
						valor_aquisição: 6999.99,
						nota_fiscal : 'NTD123', garantia : 24}} })

// Relacionando o computador com os softwares instalados

db.software.find()
db.equipamento.updateOne({patrimonio: 100, tipo: /comp/i},
{$set : {softwares_instalados : 
	          [{id_softw: 'WIN11' , licença: '123XYZ',
 			  dt_hora_instalação: new Date(), fabricante_cnpj : 678901 },
			   {id_softw: 'ORA21' , licença: 'KYW987', 
			  dt_hora_instalação: new Date()}]
}})

// Mostrando os softwares instalados 

db.equipamento.aggregate(
{$lookup:
	{from : "software",
	 localField : "softwares_instalados.id_softw",
	 foreignField: "id_softw",
	 as : "instalação_softw"
    }
})

//Estudos 05.10

db.software.insertOne xxxx
db.fabricante.deletOne ({"_id" : ObjectId ("123455")})
db.software.insertOne({TIPO_PRODUTO: "Softare", NACIONALIDADE: "BR"})

db.fabricante.aggregate (
    {$match: {TIPO_PRODUTO: /soft/i}}, 
    {$lookup: {
        from: "Software",
        localField: "fabricante.TIPO_PRODUTO",
        foreignField: "software.NOME",
        as: "Test Guardado"
        }})
